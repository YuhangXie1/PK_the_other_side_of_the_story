Index: pkmodel/protocol.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n# Protocol class\r\n#\r\n\r\nclass Protocol:\r\n    \"\"\"A Pharmokinetic (PK) protocol\r\n\r\n    Parameters\r\n    ----------\r\n\r\n    value: numeric, optional\r\n        an example paramter\r\n\r\n    \"\"\"\r\n    def __init__(self, value=43):\r\n        self.value = value\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkmodel/protocol.py b/pkmodel/protocol.py
--- a/pkmodel/protocol.py	(revision 3bd8ec13d6c9f84d9a1bf1310b7f355bd8b86a72)
+++ b/pkmodel/protocol.py	(date 1729772940788)
@@ -1,17 +1,56 @@
-#
-# Protocol class
-#
+"""
+Protocol parsing script
+"""
+import yaml
+from schema import Schema, And, Use, Optional, SchemaError
+import pytest
+
+# schema checks yaml file and raises error if values do not fit the type set
+schema = Schema(
+    [
+        {
+            "name": {"value": And(str, len)},  # checks name is a str, and not empty (length > 0)
+            "num_comp": {"value": And(Use(int), lambda s: s in (1, 2))},
+            "dose_type": {"value": And(str, lambda s: s in ("IV"))},
+            "y": {"value": And(Use(float), lambda n: n >= 0)},
+            "Q_p1": {"value": And(Use(float), lambda n: n >= 0)},
+            "V_c": {"value": And(Use(float), lambda n: n >= 0)},
+            "V_p1": {"value": And(Use(float), lambda n: n >= 0)},
+            "CL": {"value": And(Use(float), lambda n: n >= 0)},
+            "X": {"value": And(Use(float), lambda n: n >= 0)},
+            "step_size": {"value": And(Use(float), lambda n: n >= 0)},
+            "endpoint": {"value": And(Use(float), lambda n: n >= 0)},
+        }
+    ],
+    ignore_extra_keys=True  # extra dictionary keys in the file is not counted
+)
 
-class Protocol:
-    """A Pharmokinetic (PK) protocol
 
-    Parameters
-    ----------
+def load_parameters(yaml_file):
+    """
+    Load parameters from a YAML file, checks the schema and return a dictionary.
 
-    value: numeric, optional
-        an example paramter
+    Args:
+        yaml_file (str): Path to the YAML file containing model parameters.
 
+    Returns:
+        dict: A dictionary containing the model parameters and their descriptions.
     """
-    def __init__(self, value=43):
-        self.value = value
+    with open(yaml_file, 'r') as file:
+        data = yaml.safe_load(file)
+
+    try:
+        return schema.validate([data])[0]
+    except SchemaError as error_message:
+        return f"yaml input has raised an error {error_message}"
+
+
+if __name__ == "__main__":
+    # Test this file if run in debugger
+    # with open("input.yaml") as stream:
+    # data_yaml = [yaml.safe_load(stream)]
+    # with pytest.raises(SchemaError) as error_message:
+    # print(data_yaml)
+    # print(schema.validate(data_yaml))
 
+    print(load_parameters("input.yaml"))
\ No newline at end of file
Index: pkmodel/model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n# Model class\r\n#\r\nimport numpy as np\r\nimport scipy.integrate\r\nimport matplotlib.pyplot as plt\r\n\r\ndef dose(t, X):\r\n    return X\r\nclass Model:\r\n    \"\"\"A Pharmokinetic (PK) model\r\n\r\n    Parameters\r\n    ----------\r\n\r\n    value: numeric, optional\r\n        an example paramter\r\n\r\n    \"\"\"\r\n    def __init__(self, params):\r\n        self.name = params['name'] # name of the model\r\n        self.num_comp = params['num_comp'] # number of compartments to model\r\n        self.dose_type = params['dose_type']\r\n        #self.protocol = params['protocol']\r\n        self.y = params['y'] # [ng], initial quantity of drugs in central and periferal compartments.\r\n        self.Q_p1 = params['Q_p1'] # [ng], drug quantity in periferal compartment\r\n        self.V_c = params['V_c'] # [ml], volume central compartment.\r\n        self.V_p1 = params['V_p1'] # [ml], volume periferal compartment.\r\n        self.CL = params['CL'] # [ml/h], clearance rate from central compartment.\r\n        self.X = params['X'] # [ng/h], rate at which the drugs are administered into the central compartment.\r\n        self.step_size = params['step_size']\r\n        self.endpoint = params['endpoint']\r\n\r\n    def ODE_sys(self, t):\r\n        \"\"\"\r\n        Creates the Right-Hand-Side function, rhs, of the ODE specifying the quantity of drugs in the central and periferal compartments. \r\n\r\n        Args:\r\n            param1: t [h], duration for which the drug is administered.\r\n\r\n        Returns:\r\n            A list containing the rhs of the change in qc (drug quantity in central channel [ng]) and qp1 over time.\r\n\r\n        Raises:\r\n            KeyError: Raises an exception if input for parameters 2-6 is not an int or float type.\r\n        \"\"\"\r\n\r\n        # if  self.y or self.Q_p1 or self.V_c or self.V_p1 or self.CL or self.X != isinstance((int, float)):\r\n        #    raise Exception(f\"Invalid input.\")\r\n        \r\n        q_c, q_p1 = self.y\r\n        dqc_dt = dose(t, self.X) - q_c / self.V_c * self.CL\r\n\r\n        if self.num_comp < 2:\r\n                return dqc_dt\r\n        else:\r\n                transition = self.Q_p1 * (q_c / self.V_c - q_p1 / self.V_p1)\r\n                dqp1_dt = transition\r\n                return dqc_dt - dqp1_dt\r\n\r\n    def solve(self, t):\r\n        # initial conditions\r\n        y0 = np.zeros(self.num_comp + 1)\r\n        # A vector of zeros representing the initial concentration of drug in all compartments\r\n        # unpack arguments of params dict and store in args list.\r\n        # Handle dosing type and protocol\r\n        # if protocol is provided initial conc is set to dose provided\r\n        # if self.protocol:\r\n        #     y0[0] = self.protocol.dose  # Initial dose in central compartment\r\n        \r\n        # # Solve the system of ODEs\r\n        # solution = odeint(self.system_of_odes, y0, t, args=(params,))\r\n        # return solution\r\n        # unpack timepoints for which to evaluate the function.\r\n        t_eval = np.linspace(0, self.step_size, self.endpoint)\r\n        # solve the ODE for the given parameters.\r\n        sol = scipy.integrate.solve_ivp(\r\n        fun=lambda t, y: self.ODE_sys(t),\r\n        t_span=[t_eval[0], t_eval[-1]],\r\n        y0=y0, t_eval=t_eval\r\n        )\r\n        return sol\r\n\r\n# Testing\r\nmodel_args = {\r\n    'name': 'Garry',\r\n    'num_comp': 1,\r\n    'dose_type': 'IV',\r\n    'y': [1, 1],\r\n    'Q_p1': 1.0,\r\n    'V_c': 1.0,\r\n    'V_p1': 1.0,\r\n    'CL': 1.0,\r\n    'X': 1.0,\r\n    'step_size': 1,\r\n    'endpoint': 10\r\n}\r\n\r\nGarry = Model(model_args)\r\nres = Garry.solve(t=0)\r\nprint(Garry.name)\r\nprint(res.y)\r\nplt.plot(res.y[0], res.t)\r\nplt.plot(res.y[1], res.t)\r\nplt.show()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkmodel/model.py b/pkmodel/model.py
--- a/pkmodel/model.py	(revision 3bd8ec13d6c9f84d9a1bf1310b7f355bd8b86a72)
+++ b/pkmodel/model.py	(date 1729773542028)
@@ -5,8 +5,11 @@
 import scipy.integrate
 import matplotlib.pyplot as plt
 
+
 def dose(t, X):
     return X
+
+
 class Model:
     """A Pharmokinetic (PK) model
 
@@ -17,23 +20,22 @@
         an example paramter
 
     """
+
     def __init__(self, params):
-        self.name = params['name'] # name of the model
-        self.num_comp = params['num_comp'] # number of compartments to model
+        self.name = params['name']  # name of the model
+        self.num_comp = params['num_comp']  # number of compartments to model
         self.dose_type = params['dose_type']
-        #self.protocol = params['protocol']
-        self.y = params['y'] # [ng], initial quantity of drugs in central and periferal compartments.
-        self.Q_p1 = params['Q_p1'] # [ng], drug quantity in periferal compartment
-        self.V_c = params['V_c'] # [ml], volume central compartment.
-        self.V_p1 = params['V_p1'] # [ml], volume periferal compartment.
-        self.CL = params['CL'] # [ml/h], clearance rate from central compartment.
-        self.X = params['X'] # [ng/h], rate at which the drugs are administered into the central compartment.
-        self.step_size = params['step_size']
+        self.Q_p1 = params['Q_p1']  # [ng], drug quantity in periferal compartment
+        self.V_c = params['V_c']  # [ml], volume central compartment.
+        self.V_p1 = params['V_p1']  # [ml], volume periferal compartment.
+        self.CL = params['CL']  # [ml/h], clearance rate from central compartment.
+        self.X = params['X']  # [ng/h], rate at which the drugs are administered into the central compartment.
+        self.num_steps = params['num_steps']
         self.endpoint = params['endpoint']
 
-    def ODE_sys(self, t):
+    def ODE_sys(self, t, y):
         """
-        Creates the Right-Hand-Side function, rhs, of the ODE specifying the quantity of drugs in the central and periferal compartments. 
+        Creates the Right-Hand-Side function, rhs, of the ODE specifying the quantity of drugs in the central and periferal compartments.
 
         Args:
             param1: t [h], duration for which the drug is administered.
@@ -44,63 +46,67 @@
         Raises:
             KeyError: Raises an exception if input for parameters 2-6 is not an int or float type.
         """
-
-        # if  self.y or self.Q_p1 or self.V_c or self.V_p1 or self.CL or self.X != isinstance((int, float)):
+        # if for any in type(i) != "float":
+        # any in [for i in [self.Q_p1, self.V_c, self.V_p1, self.CL, self.X]]
+        # if  self.Q_p1 or self.V_c or self.V_p1 or self.CL or self.X != type(float):
         #    raise Exception(f"Invalid input.")
-        
-        q_c, q_p1 = self.y
+
+        q_c, q_p1 = y
         dqc_dt = dose(t, self.X) - q_c / self.V_c * self.CL
 
-        if self.num_comp < 2:
-                return dqc_dt
-        else:
-                transition = self.Q_p1 * (q_c / self.V_c - q_p1 / self.V_p1)
-                dqp1_dt = transition
-                return dqc_dt - dqp1_dt
+        if self.num_comp == 1:
+            return dqc_dt
+        elif self.num_comp == 2:
+            transition = self.Q_p1 * (q_c / self.V_c - q_p1 / self.V_p1)
+            dqp1_dt = transition
+            return dqc_dt - dqp1_dt
+        else:
+            raise Exception(f"No compartments")
 
     def solve(self, t):
-        # initial conditions
-        y0 = np.zeros(self.num_comp + 1)
-        # A vector of zeros representing the initial concentration of drug in all compartments
-        # unpack arguments of params dict and store in args list.
-        # Handle dosing type and protocol
-        # if protocol is provided initial conc is set to dose provided
-        # if self.protocol:
-        #     y0[0] = self.protocol.dose  # Initial dose in central compartment
-        
-        # # Solve the system of ODEs
-        # solution = odeint(self.system_of_odes, y0, t, args=(params,))
-        # return solution
-        # unpack timepoints for which to evaluate the function.
-        t_eval = np.linspace(0, self.step_size, self.endpoint)
+        # y0 = np.zeros(self.num_comp + 1)
+        y0 = np.array([0, 0.2])  # initial conditions q_c and q_p1
+        t_eval = np.linspace(0, self.endpoint, self.num_steps)
         # solve the ODE for the given parameters.
         sol = scipy.integrate.solve_ivp(
-        fun=lambda t, y: self.ODE_sys(t),
-        t_span=[t_eval[0], t_eval[-1]],
-        y0=y0, t_eval=t_eval
+            fun=lambda t, y: self.ODE_sys(t, y),
+            t_span=[t_eval[0], t_eval[-1]],
+            y0=y0, t_eval=t_eval
         )
         return sol
 
+
 # Testing
 model_args = {
-    'name': 'Garry',
+    'name': 'Intravenous Bolus Dosing',
     'num_comp': 1,
     'dose_type': 'IV',
-    'y': [1, 1],
-    'Q_p1': 1.0,
-    'V_c': 1.0,
-    'V_p1': 1.0,
-    'CL': 1.0,
+    'Q_p1': 0.5,
+    'V_c': 1,
+    'V_p1': 0.6,
+    'CL': 0.7,
     'X': 1.0,
-    'step_size': 1,
-    'endpoint': 10
+    'num_steps': 1000,
+    'endpoint': 100
 }
 
-Garry = Model(model_args)
-res = Garry.solve(t=0)
-print(Garry.name)
+Model1 = Model(model_args)
+res = Model1.solve(t=0)
+print(Model1.name)
+print(np.shape(res.y))
 print(res.y)
-plt.plot(res.y[0], res.t)
-plt.plot(res.y[1], res.t)
+plt.plot(res.t, res.y[0])
+plt.plot(res.t, res.y[1])
 plt.show()
 
+# A vector of zeros representing the initial concentration of drug in all compartments
+# unpack arguments of params dict and store in args list.
+# Handle dosing type and protocol
+# if protocol is provided initial conc is set to dose provided
+# if self.protocol:
+#     y0[0] = self.protocol.dose  # Initial dose in central compartment
+
+# # Solve the system of ODEs
+# solution = odeint(self.system_of_odes, y0, t, args=(params,))
+# return solution
+# unpack timepoints for which to evaluate the function.
\ No newline at end of file
