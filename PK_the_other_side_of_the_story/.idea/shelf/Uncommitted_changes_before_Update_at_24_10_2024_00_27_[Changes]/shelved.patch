Index: pkmodel/model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n# Model class\r\n#\r\n\r\nclass Model:\r\n    \"\"\"A Pharmokinetic (PK) model\r\n\r\n    Parameters\r\n    ----------\r\n\r\n    value: numeric, optional\r\n        an example paramter\r\n\r\n    \"\"\"\r\n    def __init__(self, value=42):\r\n        self.value = value\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pkmodel/model.py b/pkmodel/model.py
--- a/pkmodel/model.py	(revision aee93a1fd9a5bf7e41f344f8036c8be1405a0faf)
+++ b/pkmodel/model.py	(date 1729691725489)
@@ -1,6 +1,42 @@
 #
 # Model class
 #
+import numpy as np
+import scipy.integrate
+
+
+def dose(t, X):
+    return X
+
+
+def rhs(t, y, Q_p1, V_c, V_p1, CL, X):
+    """
+    Creates the Right-Hand-Side function, rhs, of the ODE specifying the quantity of drugs in the central and periferal compartments.
+
+    Args:
+        param1: t [h], duration for which the drug is administered.
+        param2: y [ng], initial quantity of drugs in central and periferal compartments.
+        param3: Q_p1 [ng], drug quantity in periferal compartment
+        param4: V_c [ml], volume central compartment.
+        param5: V_p1 [ml], volume periferal compartment.
+        param6: CL [ml/h], clearance rate from central compartment.
+        param6: X [ng/h], rate at which the drugs are administered into the central compartment.
+
+    Returns:
+        A list containing the rhs of the change in qc (drug quantity in central channel [ng]) and qp1 over time.
+
+    Raises:
+        KeyError: Raises an exception if input for parameters 2-6 is not an int or float type.
+    """
+    if y or Q_p1 or V_c or V_p1 or CL or X != isinstance((int, float)):
+        raise Exception(f"Invalid input.")
+
+    q_c, q_p1 = y
+    transition = Q_p1 * (q_c / V_c - q_p1 / V_p1)
+    dqc_dt = dose(t, X) - q_c / V_c * CL - transition
+    dqp1_dt = transition
+    return [dqc_dt, dqp1_dt]
+
 
 class Model:
     """A Pharmokinetic (PK) model
@@ -12,6 +48,52 @@
         an example paramter
 
     """
-    def __init__(self, value=42):
-        self.value = value
+
+    def __init__(self, num_compartments=1, dosing_type='IV', protocol=None):
+        self.num_compartments = num_compartments
+        self.dosing_type = dosing_type
+        self.protocol = protocol
+
+    def ode_system(self, y, t, params):
+        # Example: y[0] is the central compartment, y[1]..y[n] are peripheral
+        # Modify ODEs depending on the number of compartments
+        # unpack params
+        # dydt
+        # central compartment ODEs dydt[0] = #elimination from central compartment
+        # peripheral compartment ODEs
+        # if num_compartments > 1
+        # dydt[1] = exchange with central compartment
+
+        # return dydt
+        pass
+
+    def zero_comp(self, t, params):
+        # initial conditions
+        # y[0] = np.zeros(self.num_compartments + 1)
+        # A vector of zeros representing the initial concentration of drug in all compartments
+        # unpack arguments of params dict and store in args list.
+        # Handle dosing type and protocol
+        # if protocol is provided initial conc is set to dose provided
+        # if self.protocol:
+        #     y0[0] = self.protocol.dose  # Initial dose in central compartment
 
+        # # Solve the system of ODEs
+        # solution = odeint(self.system_of_odes, y0, t, args=(params,))
+        # return solution
+
+        args = [
+            params['Q_p1'], params['V_c'], params['V_p1'], params['CL'], params['X']
+        ]
+        # unpack timepoints for which to evaluate the function.
+        step_size, end_point = params['step_size'], params['end_point']
+        t_eval = np.linspace(0, step_size, end_point)
+        # solve the ODE for the given parameters.
+        sol = scipy.integrate.solve_ivp(
+            fun=lambda t, y: rhs(t, y, *args),
+            t_span=[t_eval[0], t_eval[-1]],
+            y0=params['y0'], t_eval=t_eval
+        )
+        return sol
+
+    def one_comp(self, params):
+        return
\ No newline at end of file
Index: .idea/PK_the_other_side_of_the_story.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/PK_the_other_side_of_the_story.iml b/.idea/PK_the_other_side_of_the_story.iml
new file mode 100644
--- /dev/null	(date 1729689157382)
+++ b/.idea/PK_the_other_side_of_the_story.iml	(date 1729689157382)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+      <excludeFolder url="file://$MODULE_DIR$/pk-venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.13 (PK_the_other_side_of_the_story)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1729688215837)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1729688215837)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1729688215765)
+++ b/.idea/modules.xml	(date 1729688215765)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/PK_the_other_side_of_the_story.iml" filepath="$PROJECT_DIR$/.idea/PK_the_other_side_of_the_story.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1729688397910)
+++ b/.idea/misc.xml	(date 1729688397910)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.13 (PK_the_other_side_of_the_story)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13 (PK_the_other_side_of_the_story)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1729688215883)
+++ b/.idea/vcs.xml	(date 1729688215883)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# vim\r\n.vim/\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\npip-wheel-metadata/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n.webassets-cache\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n.python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.env\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision aee93a1fd9a5bf7e41f344f8036c8be1405a0faf)
+++ b/.gitignore	(date 1729679076198)
@@ -29,6 +29,7 @@
 .installed.cfg
 *.egg
 MANIFEST
+pk-venv/
 
 # PyInstaller
 #  Usually these files are written by a python script from a template
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1729688216727)
+++ b/.idea/.gitignore	(date 1729688216727)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
